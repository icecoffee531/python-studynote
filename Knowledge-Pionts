python变量：
变量类型：str（字符串类型） int（整数类型）float（浮点类型）bool（布尔类型）
str：用单引号，双引号，三引号所包含的长串字符
int：数字整数
float：可以包含有小数的数字
bool：对错判断类型
int，float，bool：属于同一字符类型，可以相互运算
str不能与int，float，bool直接运算，得通过格式转换才能相互运算
格式化转换int（str）就可以转换为整数类型，其他同理
输出类型：%s(字符串)，%d（十进制整数）（%06d 6位不足位置补0），%.f(小数)（%.2f 两位小数）%%（输出%）

python运算符：
算术运算符：+（相加）、-(相减)、*（相乘）、/（相除）、//（取整），%（取余），**（幂）
比较运算符：==（判断是否相等）、!=（判断是否不相等）、>(判断是否大于)、<(判断是否小于)、>=(判断是否大于等于)、<=（判断是否小余等于）
逻辑运算符：and（与，都真为真）、or（或，一个真即为真）、not（非，对数据取非）
赋值运算符：=（a = b）、+=（a = a + b）、-=（a = a - b）、/=（a = a/b）、
           //=（a = a//b）、*=（a = a*b）、%=（a = a%b）、**=（a = a**b）
运算的优先级：
算术的优先级最高： 幂的优先级最高 → 乘除、取整、取余 → 加减
比较的优先级第二： >、<、>=、<=最高 → ==、!=
赋值的优先级第三： 所有赋值符优先级一样高
逻辑的优先级最低： 逻辑符的优先级也一样高

if分支:
  if的基本语句结构：if 条件（判断类型）：
                      语句块（满足条件时运行的）
                 else：
                      语句块（不满足条件时运行的）
  if多分支的语句结构：if 条件1（判断类型）：
                      语句块（满足条件1时运行的）
                  elif 条件2 （判断类型）：
                      语句块（不满足条件1，满足条件2时运行的）
                  elif 条件3 （判断类型）：
                      语句块（不满足条件1，2，满足条件3时运行的）（以下同理）
                  else：
                      语句块（不满足条件时运行的）
  if里的条件还可以用逻辑运算符联立判断：（if a>0 and b<0：）其他和上面一样
循环：while，for
  while循环：
  基本结构：
   while 条件：
       语句块（条件满足就执行，
               执行完就又回到while后面的条件继续判断，
               如果条件还满足就继续执行此语句块，
               否则条件不满足就结束while循环）
   循环：基本四大要素：条件、循环体（语句块）、改变循环变量的值（使循环不是死循环）、循环变量初始化
   循环变量初始化
   while 条件:
       循环体
       改变循环变量的值
   while里面还可以用break、continue两个执行语法
   break：当循环中遇到break就停止本层循环，继续循环下面的语句（只能用在循环里面）（想当于直接退出整个while循环）
   continue:结束本次循环，继续下一次的循环（只能用在循环里面）（跳过一次while循环的结果，进行下一次的while循环）
   也可以用else来让while循环输出，主要是为了书写看上去方便简洁，跟不写else在循环体外面直接输出一个意思
   
  for循环：
    for item in items:
        取出items里面的数据
    读取字符串里面的每一个字母（读取完毕后退出for循环，items算是个序列然后依次读取每一个项，然后用对应的项的数据、去做运算、执行语句）
  range()函数是得到一串连续的数字，eg：range（1，5）就是读取1、2、3、4最右边的5不取
  for也可以用break、continue、else，用法相同
  嵌套循环：
  for里面可以加for也可以加while，同理while也是。
  然后依次执行第一个for和第二个for
  
 随机数:
  python内使用随机数需要使用随机数的模块--"工具包": import random
  random的几种用法: 1) 随机小数
                      random.random() #获取大于0且小于1 之间的小数
                      random.uniform(a,b) #获取大于a小于b-1的小数
                   2) 随机整数
                      random.randint(a,b) #获取a到b之间的整数包括a,b
                      random.randrange(a,b) #获取a到b之间的整数不包括b
                      random.randrange(a,b,2) #获取a到b之间的奇数不包括b
                   3) 随机选择一个返回值
                      random.choice([1,"23",[4,5]]) # 返回1或者"23"或者[4,5]
                   4) 随机选择多个返回值,返回的个数为函数的第二个参数
                      random.sample([1,"23",[4,5]],2) # 返回列表元素任意2个组合作为一个列表
                   5) 打乱顺序排序
                      random.shuffle(list)  #打乱列表list中的元素顺序
 列表:
    列表中每个元素的数据类型可以各不相同,创建可以直接用a_list=[],方括号里写元素,也可以用list将字符串转换成列表;
    删除: del a_list #删除整个列表    del a_list[i] #删除a_list的第i位上的__元素
          a_list.pop() #默认删除列表中最后一位的元素,在括号里给予相应位置时,_移除相应位置的元素,并且返回所删元素的值
          a_list.remove() #删除首次出现的指定元素,括号内写元素名,列表中与元_素名对应的元素从左到右删_除第一个对应的元素
          a_list.clear() #把列表清空变成空列表 []
    增加: a_list.append(a) #在列表尾部追加一个元素a,不改变列表的内存地址,属于原地操作
          a_list.insert(i,a) #在列表的第i位插入一个元素a,不改变列表的内存地址,属于原地操作
          a_list.extend(b_list) #将另一个可迭代对象的所有元素添加至列表对象的尾部,不改变列表的内存地址,属于原地操作
          +和* #不是为列表添加新元素,而是创建一个新的列表,不属于原地操作 b_list = a_list + [a] 、 b_list = a_list*2
    访问与计数: a_list.count(a) #列表a_list中a出现的次数
                a_list.index(a) #列表中a首次出现的位置,如果没有则抛出异常
                a in a_list #返回一个bool值,如果a在a_list中则为True,不在则为Flase
         
    排序: a_list.sort() #默认升序排列
          a_list.sort(reverse = True) #降序排列
          a_list.reverse() #逆序排列 以上三种均属于原地操作
          sorted(a_list) #和a_list.sort()功能相同,但是不属于原地操作,产生了新的列表
          reversed(a_list) #和a_list.reversed()功能相同,但是不属于原地操作,产生了新的列表
    用于序列的常用内置函数
    len(a_list) #返回列表a_list中元素的个数,同样适用于元组,字符串,字典,集合等
    max(),min() #返回列表中的最大或最小的元素,同样适用于元组,字典,集合,range等
    sum(a_list) #对列表a_list中的元素求和
    zip() #返回可迭代的zip对象 eg: a_list = [1,2,3]
                                  b_list = [4,5,6]
                                  c_list = zip(a_list,b_list)
                                  print(c_list) → 0x0000000003728908 #zip不是一个列表
                                  print(list(c_list)) → [(1,4),(2,5),(3,6)]
    enumberate() #返回列表的索引值,元素 eg: for i,ele in enumberate(['a','b'])
                                           print(i,ele) → (0,'a')
                                                          (1,'b')
    遍历列表的三种方式: a = ["a","b"]
                      for i in a
                          print(i)
                      for i in range(len(a)):
                          print(i,a[i])
                      for i,ele in enumberate(a):
                          print(i,ele)
                      
    列表推导式子: #使用非常简洁的方式来快速生成满足特定需求的列表,代码具有很强的可读性
    
    
                      
    
                                        
                                  
                                  
                                  
          
          
    
  
