1.JavaScript的执行原理：当客户端向服务器端请求某个页面时，服务器端将整个页面中包含JavaScript的脚本代码作为响应内容，
                       发送回客户端机器，客户端浏览器根据发回的网页文件从上往下逐行读取并解析其中的html或者脚本代码
2.JavaScript脚本代码是从服务器端下载到客户端，然后在客户端执行，它不占用服务器端的CPU等资源。因此，通过在客户端执行
  脚本代码，分担了服务器的任务，从而间接地提升了Web服务器的性能。
3.JavaScript组成:
              1.ECMAScript：JavaScript语法核心。
              2.DOM：文档对象模型（Document Object Model），提供访问和操作网页内容的方法和接口。
              3.BOM：浏览器对象模型（Browser Object Model），提供与浏览器交互的方法和接口。
4.JavaScript脚本代码位置: 
              1.放置在<script></script>标签对之间。
                eg:<script type="text/javascript">
                    document.write("<h2>欢迎进入JavaScript世界</h2>");
                   </script>#输出"欢迎进入JavaScript世界"
              2.将JavaScript代码放置在一个单独的文件中,创建一个js文件,然后再script标签中用src去读取
                eg:<script src="demo1.js" type="text/javascript"></script>
                #带有src属性的<script>标签，不应该在<script>和</script>标签之间再度包含额外的JavaScript代码。
                 如果包含了嵌入的代码，则只会下载并执行外部脚本文件，嵌入的代码会被忽略。
              3.将脚本程序代码作为属性值
                eg:<a href="javascript:document.write('<h2>欢迎进入JavaScript世界</h2>');">hello</a>
                这里当作了a标签中的属性

5.变量
      1. 先声明变量再赋值
         var是声明变量的关键字。给变量命名时，要遵守如下规则：
        （1）第一个字符必须是一个字母、下划线（_）或一个美元符号$。
        （2）后面的字符可以是字母、下划线、美元符号或数字。
        （3）区分大小写。
        （4）不能与关键字同名 ，如while、for和if等。
      2.同时声明和赋值变量
        eg:var message=”hi”;
           var width=34,height=31;
           var name,age=23; //这里name只是声明,没有赋值
      3.不声明直接赋值
        eg:message=”hi”;//这种方法很容易出错，不推荐使用。
      总结:JavaScript的变量是采用弱类型的形式，即声明变量时不必确定类型，而是在使用或赋值时自动确定其数据类型

6.数据类型
  基本数据类型: undefined、null、boolean、number、string
  复杂数据类型: object
  typeof操作符: 用来查询变量的数据类型的.eg:var message = "hi";
                                          document.write(typeof message); //string
  1.undefined: 对未初始化的变量及未声明的变量使用typeof运算符均会返回undefined.
    eg:var name; 
       document.write(typeof name);  //undefined 
       document.write(typeof address);  //undefined 
  2.null: null是空类型，表示一个变量已经有值，但值为空对象，使用typeof检测时会返回object。
    eg:var obj=null;
       document.write(typeof obj); //object
  3.boolean: boolean是布尔类型，也称真假类型。这个类型有两个标准值：true(真)和false(假)。布尔值用来表示一个逻辑表达式的结果，通常用做判断处理。
    eg:var flag=1<2;
       document.write(typeof flag); //boolean
  4.number: 在c#语言中,小数和整数会被分别存储在不同的类型中。但在JavaScript中，整数、小数都是number。
    eg:var num1=12,num2=12.3;
       document.write(typeof num1);//number
       document.write(typeof num2);//number
  5.string: string是字符串类型，这是程序中使用最广的一种类型。字符串是使用单引号或双引号引起来的若干字符。
    eg:var myName='Cidy';
       document.write(typeof myName);//string
       
7.运算符
  运算符号是一种特殊的符号，一般由1~3个字符组成，用于实现数据之间的运算、赋值和比较。
  算术运算符: +(加)、-(减)、*(乘)、/(除)、++(累加1)、--(累减1)
  赋值运算符: =
  比较运算符: >、<、>=、<=、==、!= 
  逻辑运算符: &&(and)、||(or)、!(not)

8.JavaScript的流程控制语句
 （1）顺序结构: 顺序结构就是程序按照语句出现的先后顺序依次执行，这是所有程序的最基本结构，一般程序中的大部分代码采用的都是顺序结构。
 （2）选择结构: 在编写一个程序时，通常需要根据特定的条件执行不同的语句，JavaScript中用选择结构来达到这种需求，if语句是使用最为普遍
               的条件选择语句，if语句有多种形式：单分支、双分支和多分支
               if单分支的语法结构如下: if(条件表达式) {
                                        语句或语句块
                                     }
               if双分支的语法结构如下: if(条件表达式) {
                                        语句或语句块1
                                     } else{
                                        语句或语句块2
                                     }
               if多分支的语法结构如下: if(条件表达式1){
                                        语句或语句块1
                                     } else if(条件表达式2){
                                        语句或语句块2
                                     }......
                                     else if(条件表达式n){
                                        语句或语句块n
                                     }else{
                                        语句或语句块n+1
                                     }

               switch的语法结构如下: switch（表达式）{
                                    case 取值1：语句或语句块1;break;
                                    case 取值2：语句或语句块2;break;
                                    ......
                                    case 取值n：语句或语句块n;break;
                                    default: 语句或语句块n+1;break;
                                    }//switch后的条件表达式结果一旦碰到与之匹配的case，就会执行该case后的语句，
                                     //如果没有break语句，继续后面case下的代码。
 （3）循环结构: 在现实生活中，经常需要重复且有规律地做一些事情。例如每天都要按时起床、吃早饭、上班或上学等等，周而复始。同理，程序里也经常
               会出现重复的情况。例如重复让某一个变量乘以一个整数，直到100遍为止。
               while循环语法结构如下: while（条件表达式）{
                                      语句或语句块
                                    }//如果一开始就检测到条件表达式的结果是false，则{}中的代码一次都不执行，即循环的次数是0。
                                     //如果条件表达式的结果始终是true，称为死循环，应当避免这种情况。
               do-while语句的语法结构如下所示: do{
                                             语句或语句块
                                             }while(条件表达式);//do-while语句的功能和while语句差不多，只不过它是在执行完
                                              //第一次循环之后才检测条件表达式的值，这意味着包含在{}的代码至少要被执行一次。
               for语句的语法结构如下所示: for(初始化表达式;循环条件表达式;循环后的操作表达式){
                                        语句或语句块
                                        }//由于JavaScript中不存在块级作用域，因此也可以在外部访问到在循环内部定义的变量
                                        
               break与continue: 只有循环条件表达式的值为false时，循环语句才能结束循环，
                                如果想提前中断循环，可以在循环体语句块中添加break语句;
                                在循环体中添加continue语句，就跳过本次循环要执行的剩余语句，然后开始下一次循环。

9.JavaScript的函数
  定义函数: 使用函数可以实现特定的功能，在使用函数前必须对函数进行定义。定义函数和其他的普通JavaScript代码一样，
            都需要放置在<script>和</script>之间，需要使用关键字function。
  格式: function 函数名（形式参数1,形式参数2,…,形式参数n）{
           语句
        }
  定义函数有以下几个规则:
  1. 使用function关键字，function后是函数名，不必说明返回值的类型。
  2. 函数的命名规则与变量名的命名规则相同。
  3. 函数名后的()，可以包含若干参数，也可以选择不带任何参数。
  4. 最后是一对{}，包含具体实现特定功能的若干语句。
  
  调用函数: 函数是不会自动执行的，因此定义好函数后，就可以在适当的时候进行调用。调用一个函数的方法是使用函数名称，
            并且在函数名后用括号包含所需要传入的参数值。调用函数的语句也需要放置在<script>和</script>里。
            //调用一个函数的前提是这个函数必须事先定义，如果试图调用一个未定义的函数，就会收到一条错误信息。
            
  函数的参数: 对于函数外部的语句来说，函数内部语句是不可见的，这时就需要一种沟通机制，参数就是它们沟通的桥梁。
             通过参数，外部语句可以传递不同的数据给函数处理，参数也是一种变量，但这种变量只能被函数体内的语句使用，
             并在函数被调用时赋值，通常它们被称为形式参数。在创建getArea函数时，声明了形式参数width和height，函数
             内部的语句都可以使用width和height，但目前它们是没有值的，它们的值取决于调用函数时给它们传递的值，称为实参。
             JavaScript中的参数声明不需要关键字var，但参数的命名与变量命名规则相同。
             JavaScript中函数参数的特殊性：
            （1）函数声明了参数，调用时也可以不传递参数，这在java中是会出现编译错误的。
            （2）不管函数声明时有多少个参数，调用函数时可以传递若干个参数值给函数，并且实际传递的参数值还可以在函数内部获得。
            
  函数的返回值: 函数的参数是外部语句对函数内部语句的信息传递，函数的返回值刚好相反，能够将一个结果返回给外部语句使用。实现函
               数返回值的语句是return,语法如下所示:
                                                 return 返回值; //写在函数内,var result = 函数(参数)
                                                                //这时候result的值即为函数的返回值
                                                               
  匿名函数: 匿名函数就是没有名字的函数，也称为拉姆达函数，是一种使用JavaScript函数的强大方式。
  eg://使用匿名函数求长方形面积。
       var area=function (width,height){
          document.write("面积是："+width*height);
       };
       area(3,4);//12
       
  系统函数
 （1）parseInt: parseInt函数将字符串转换为整数。它从字符串的开头开始解析，在第一个非整数位置停止解析并返回前面读到的所有整数。
               如果字符串不是以整数开头，将返回NaN(Not a Number：非数字值)。
 （2）parseFloat: parseFloat()函数和parseInt()函数类似，只不过它是返回一个浮点数。
 （3）isNaN: isNaN() 函数用于判断参数是否是NaN（不是数字）。如果是 NaN， 那么 isNaN 函数返回 true ，否则返回 false。
 （4）eval(): 运行以字符串形式表示的javascript代码串，并返回执行代码串后的结果。

10.JavaScript的事件
   事件与处理程序的绑定:
  （1）在事件源对象所对应的html标签上增加一个要处理的事件属性，让事件属性值等于处理该事件的函数名或程序代码。
   eg: 当单击段落时，文本的大小改成30px。
       function changeSize(){
        var obj=document.getElementById("txt");
        obj.style.fontSize="30px";
       }
       ......
       <p id="txt" onclick="changeSize()">事件与处理程序的绑定</p>
  （2）用匿名函数来简化，即事件名=function(){…}。
   eg:  <script type="text/javascript">
        document.getElementById("txt").onclick=function(){
          this.style.fontSize="30px";
        };
        </script>
  常用的事件
  - onclick事件
    鼠标单击页面元素时触发的事件
  - onload和onunload事件
    onload事件: 会在页面加载完成后立即发生
    onunload事件: 用户关闭或刷新网页时触发
  - onblur事件
    光标或者焦点离开元素后触发的事件。
  - onfocus事件
    光标或者焦点放在元素上触发的事件
  - onchange事件
    通常指输入框的值发生了变化或者改变下列列表框的选项会触发onchange事件。
  - onmouseover和onmouseout事件
    onmouseover和onmouseout事件是指鼠标移入、移出页面元素时触发的事件。
  - 浏览器默认的事件处理程序
    单击表单元素的“提交按钮“会触发form标签的onsubmit事件，浏览器对这个事件的默认处理方式是提交数据给action属性指定的页面进行处理。
    如果要让用户在单击“提交按钮”后不提交数据到指定的页面，就需要编写一个事件处理程序，来改变浏览器对form标签的onsubmit事件的默认处理方式。
    要取消浏览器对当前事件默认处理，可以在html标签的事件属性设置中使用return false语句。
    eg:<form action="info.html" onsubmit=" return false">
         <input type="submit" value="提交" />
       </form>

11.浏览器对象模型（BOM）
   浏览器对象模型(Browser Object Model): 一个完整的浏览器对象模型主要包括window、history、location和document等对象，
                                       其中window对象是整个浏览器对象模型的顶层对象。
   window对象: window对象处于对象模型的第一层，对于每个打开的窗口，系统都会自动将其定义为window对象。
   window常用的属性: 
       (1) document: 窗口中当前显示的文档对象
       (2) history: History对象保存窗口最近加载的URL
       (3) location: 当前窗口的URL
       (4) status: 状态栏文本
   window常见的方法：
       (1) prompt: 显示可提示用户输入的对话框,它有两个参数,第一个参数提示用户应该输入的内容，第二个参数是文本框中显示的初始默认值，
                   如果没有传递第二个参数，文本框中默认显示undefined。
       (2) alert: 显示带有一个提示消息和一个确定按钮的警示框
       (3) confirm: 显示一个带有提示信息、确定和取消按钮的确认框,用来确认用户针对某一个问题的答案，必须经过用户同意操作才能完成。
       (4) close: 关闭浏览器
       (5) open: 打开新的浏览器窗口,加载给定URL所指定的文档
       (6) setTimeout: 在设定的毫秒数后调用函数或者计算表达式
       (7) setInterval: 按照设定的周期（以毫秒计）来重复调用函数或表达式
       //(6)(7)这两个方法的语法相同，都带有两个参数：一个是带引号的程序代码或函数的调用，另一个是以毫秒表示的时间，这个时间代表执行代码的延迟。
       (8) clearInterval: 取消重复设置，与setInterval对应
   利用窗口对象的open、close方法打开、关闭窗口:
   open方法的返回值是打开的window的对象。Open方法的第一个参数是新窗口的URL，第二个参数是给新窗口的命名，第三个参数是设置新窗口的特征。
   常见的特征如下:
       (1) height、width: 窗口文档显示区的高度、宽度。单位为像素(px)
       (2) left、top: 窗口的x坐标、y坐标。单位为像素(px)
       (3) toolbar=yes|no|1|0: 是否显示浏览器的工具栏。黙认是yes
       (4) scrollbars=yes|no|1|0: 是否显示滚动条。黙认是yes
       (5) location=yes|no|1|0: 是否显示地址地段。黙认是yes
       (6) status=yes|no|1|0: 是否添加状态栏。黙认是yes
       (7) menubar=yes|no|1|0: 是否显示菜单栏。黙认是yes
       (8) resizable=yes|no|1|0: 窗口是否可调节尺寸。黙认是yes
       (9) titlebar=yes|no|1|0: 是否显示标题栏。黙认是yes
       eg: open("adv.html"(打开的网页url),"adv"(网页名),"height=500,width=800,location=no,menubar=no,toolbar=0,resizable=no"(窗口特征));
       
   history对象: history对象保存了当前浏览器窗口打开文档的一个历史记录列表，使用history对象，可以将当前浏览器页面跳转到某个曾经打开过的页面。
                获取histroy对象是通过window对象的history属性。
   history对象有三个方法：
       (1) back(): 后退一个页面，相当于浏览器后退按钮
       (2) forward(): 前进一个页面，相对于浏览器前进按钮
       (3) go(): 打开一个指定位置的页面
       
   location对象: location对象用于管理当前打开窗口的URL信息，相当于浏览器的地址栏。location对象通过window的location获取属性。
   location对象的常用属性和方法如下表：
       (1) href属性: 获取或设置网页地址
       (2) reload方法: 重新加载当前页面，相对于浏览器的刷新按钮
12.文档对象模型（DOM）
   文档对象模型（Document Object Model）: DOM把html文档看成由元素、属性和文本组成的一棵树。
   文档: document → 根节点: <html> → 元素: <head> → 元素: <title> → 文本: "文本标题"
                                  → 元素: <body> → 元素: <a> → 属性: href
                                                            → 文本: "我的链接"
                                                 → 元素: <h1> → 文本: "我的标题"
   可以把html文档中的每个成分看成一个节点，所以DOM的核心操作是查看节点、创建和增加节点以及删除和替换节点。
   节点的特点如下：
       1. 整个文档是一个文档节点；
       2. 每个HTML标签是一个元素节点；
       3. 包含在HTML元素中的文本是文本节点；
       4. 每个HTML属性是一个属性节点；
       5. 注释属于注释节点；
       6. html文档中的节点彼此间都存在关系，如一张家族谱。
    document对象:
    整个html文档在DOM中是一个document对象，常见的属性如下表	：
       (1) bgColor: 页面的背景颜色
       (2) fgColor: 文本的前景颜色
       (3) title: 页面标题
    document对象的方法主要用于操作文档节点，控制其内容和外观,其常用的方法如下表:
       (1) write: 用于向html文档中动态输入内容
       (2) getElementById: 获取指定id的html页面元素对象 //几乎所有的元素对象都有innerHTML属性。
                                                        innerHTML属性是一个字符串，用来设置或获取位于对象起始和结束标签之间的HTML内容。
       (3) getElementsByTagName: 返回所有指定标签名的html页面元素对象,参数tagname为必选项，为字符串类型。返回值是指定标签名的对象的集合，
                                 如果无符合条件的对象，则返回空数组。
       (4) getElementsByName: 获取一组指定name的html页面元素对象,参数name为必选项，为字符串类型。
                              返回值为数组对象，如果无符合条件的对象，则返回空数组。
       (5) createElement: 创建代表某个html元素的对象
   节点信息: 如果编程时希望访问某个元素的父元素，但又不知道父元素的ID、name和tag，可以根据层次关系来查找节点，在DOM中，
            每个节点都具有访问各节点的属性.
   节点的属性如下:
       (1) parentNode: 当前节点的父节点引用
       (2) childNodes: 当前节点的所有子节点
       (3) firstElementChild: 当前节点的第一个子节点
       (4) lastElementChild: 当前节点的最后一个子节点
       (5) previousSibling: 当前节点前一个兄弟节点
       (6) nextSibling: 当前节点后一个兄弟节点
   使用appendChild(node)将指定的节点追加到现有子节点的末尾。
   使用removeChild(node)删除指定节点

13.JavaScript内部对象
   (1) Date对象:
       通过创建Date对象，可以获取计算机中的时间。由于脚本总是在客户端中运行，而不是服务器，所以获取的是本地计算机的时间。
       Date对象的方法:
       1. getDate: 返回一个月中的某一天（1~31）
       2. getDay: 返回一周中的某一天（0~6），0为周日，1为周一，以此类推
       3. getFullYear: 以四位数返回年份
       4. getHours: 返回小时（0~23)
       5. getMilliseconds: 返回毫秒
       6. getMinutes: 返回分钟（0~59）
       7. getMonth: 返回月份（0~11），0为一月，1为二月，以此类推
       8. getSeconds: 返回秒数（0~59）
       9. getTime: 返回1970年1月1日至今的毫秒数
       //每个Date实例对象都只是计算机的一个毫秒级快照，换言之，Date对象只是保存了它被创建时的时间信息，如果希望总是显示当前最新时间，
       //就需要不停地获取时间快照。(setTimeout()|setInterval())
   (2) Math对象:
       使用Math对象可以进行更多的高级运算，如：平方根、三角函数、对数和随机数等;
       1. Math.abs(number): 返回number的绝对值
       2. Math.ceil(number): 对number向上取整,如Math.ceil(67.6)返回值是68
       3. Math.floor(number): 对number向下取整，如Math.ceil(67.6)返回值是67
       4. Math.max(number1,number2): 返回number1与number2中的较大值
       5. Math.min(number1,number2): 返回number1与number2中的较小值
       6. Math.pow(x,y): 返回x的y次幂
       7. Math.random(): 返回0和1之间的伪随机数，可能为0，但总是小于1，[0,1)
       8. Math.round(number): 返回最接近number的整数
       9. Math.sqrt(number): number的平方根
   (3) 数组:
       数组就是用一个变量来表示的一组数据的集合。它用于实现对这组数据的统一管理，数组中的每一个数据也叫数组的一个元素。
       1.数组列表:
         数组列表用于表示一组数据的集合，它由一对方括号（[]）包围，列表中的每个元素用逗号分隔，数组元素可以是任意类型的数据（包括其他数组）
       2.Array对象
         JavaScript中也提供一个名为Array的内部对象来创建数组。通过调用Array对象的各种方法，可以方便地对数组进行排序、删除和合并等操作。
         Array有多种形式的构造函数，因此利用Array对象创建数组的方式有多种.
         下面列出了最常用的三种方式：
         1> var arr=new Array();
         2> var arr=new Array(4);
         3> var arr=new Array(1,2,3);
   (4) String对象:
       String是动态对象，需要创建对象实例后才能使用它的属性或方法。需要注意的是，当某字符串使用单引号或双引号标注时，
       可以被当作字符串对象实例进行处理，从而直接调用String对象的属性和方法。
       常用属性: length是String对象的最常用属性，用于计算字符串中的字符个数
       String对象中的方法主要用于搜索字符串中的字符、转换字符的大小写、分割字符串以及截取子字符串
       String对象常用方法如下:
       1. charAt: 返回字符串对象中指定索引处的字符，索引从0开始
       2. indexOf: 返回某个子字符串在目标字符串中首次出现的位置，在目标字符串中没有子字符串则返回-1
       3. substr: 从指定索引位置开始截取指定长度的字符串
       4. substring: 返回指定索引范围内的字符串。
       5. toLowerCase: 把字符串转化为小写
       6. toUpperCase: 把字符串转化为大写
       7. split: 返回按照指定分隔符拆分的若干子字符串数组。如：var arr="hello,world".split(",");
                                                           arr是数组变量，其中第一个数组元素是“hello”，第二个数组元素是“world”
                                                           
14.对象常用语句
   (1) with语句
       在一段连续的程序代码中，如果多次使用到某个对象的属性或方法，那么只需要在with关键字后的小括号中写出这个对象的名称，
       然后就可以在其后大括号中的执行语句里直接引用该对象的属性名或方法名，不必再在每个属性和方法名前都加上对象实例名和点（.）。
       语法: with(对象名称){
              执行语句块
             }

15.正则表达式
   (1)创建RegExp对象实例的两种方式：
      1. 构造函数方式
         var reg=new RegExp(“表达式”,“附加参数”);
      2. 普通方式
         var reg=/表达式/附加参数
         附加参数是可选的，用来扩展正则表达式的含义，主要有三个参数:
         1> g：全局匹配
         2> i：用作忽略大小写的参数
         3> m：多行匹配
   (2)test方法
      该方法检查一个字符串中是否存在创建RegExp对象实例时所指定的正则表达式模式，如果存在则返回true，否则返回false。
      语法: regExpObject.test(string);
      eg: 检查字符串中是否存在“world”
           var str="hello world";
           var regExp=new RegExp("world");
           var result=regExp.test(str);
           document.write(result);  //true
   (3)exec方法
      exec方法使用RegExp对象实例创建时指定的正则表达式模式搜索字符串，并返回一个包含搜索结果的数组
      语法: regExpObject.exec(string);
      exec方法返回的数组有index属性，它表示匹配的字符串在整个被搜索字符串中的位置；
      exec方法每次从字符串的起始位置搜索第一个与模式匹配的字符串。
   (4)限定符
      1. {n}：规定前面的元素或组合项要连续出现n次。
          eg: var regExp=/he{2}/;  //判断e要连续出现2次以上
              var str="heeel";
              var flag= regExp.test(str)
              document.write(flag); //true
      2. {n,}：规定前面的元素或组合项至少出现n次。例如“o{2,}”，字符串“bod”不能与之匹配，但“foood”可以与之匹配。
      3. {n,m}：规定前面的元素或组合项至少连续出现n次，至多连续出现m次，其中n≤m，逗号和数字之间不能有空格。
                例如“o{1,3}”，字符串“food”和字符串“foood”都能与之匹配
      4. +：规定前面的元素或组合项必须出现一次或连续出现多次，等效于{1,}
      5. *：规定前面的元素或组合项可以出现零次或连续多次，等效于{0,}。例如“zo*”，字符串“z”和“zoo”都能与之匹配。
      6. ?：规定前面的元素或组合项出现零次或一次，等效于{0,1}。例如“zo?”,字符串“z”和“zo”都能与之匹配。
    (5)选择匹配符
       选择匹配符有且仅有一个，即“|”字符，用于选择匹配两个选项之中的任意一个。例如“chapter|section1”匹配的是“chapter”或“section1”，
       如果要匹配“chapter1”或“section1”，使用括号，即“(chapter|section)1”。
    (6)字符匹配符
       1. […]：匹配方括号中包含的字符集中的任意一个字符。例如，正则表达式“[abc]”，字符“a”、“b”、“c”都可以与之匹配
       2. [^…]：匹配方括号中未包含的任何字符。例如，正则表达式“[^ab]”，除了字符“a”、“b”之外,其他的任何字符都可以与之匹配
       3. [a-z]，[1-9]：匹配指定范围内的任何字符
       4. [^a-z]，[^1-9]：匹配不在指定的范围内的任何字符
       5. \d：匹配任意一个数字字符，等效于[0-9]
       6. \D：匹配任意一个非数字字符，等效于[^0-9]
       7. \s：匹配任何空白字符，包括空格、制表符等
       8. \S：匹配任何非空白字符
       9. \w：匹配任何英文字母、数字和下划线，等效于[A-Za-z0-9_]
       10. \W：匹配任何非英文字母和数字类字符，但不包括下划线，等效于[^A-Za-z0-9_]
       11. .：匹配除换行符\n之外的任何单字符
     (7)常用的正则表达式
       1. 匹配身份证号码：^\d{15}$|^\d{18}$
       2. 邮箱：^\w+@\w+.[a-zA-Z]{2,3}(.[a-zA-Z]{2,3})?$
       3. 中国的邮政编码：^\d{6}$
       4. 匹配字符串中的中文字符：[\u4e00-\u9fa5]
       5. 验证5到12位的qq号：^\d{5,12}$

16.String对象与正则表达式
   (1) match方法
   String对象的match方法作用与RegExp对象的exec方法类似，它使用正则表达式模式对字符串进行搜索，并返回一个包含搜索结果的数组，
   传递给match方法的参数是一个RegExp对象实例，即使用正则表达式作为match方法的参数去搜索字符串；而传递给exec方法的参数是一个
   String类型的对象实例，即使用正则表达式对象去搜索作为exec方法参数的字符串。
   语法: array=stringObj.match(regExpObject);
   eg: 要求在一句英文中，搜索以“th”开头的四个字符的单词，忽略大小写。
        var str="This is a dog,that is a cat";
        var regExp=/th[a-z]{2}/gi;
        var arr=str.match(regExp);
        document.write(arr);// This,that
        //match()方法使用正则表达式模式对字符串进行搜索，如果在字符串中没有搜索到匹配正则表达式模式的内容，则此方法返回值是null
   (2) search方法
    search方法利用使用正则表达式搜索，返回的是第一个匹配到的字符串在整个被搜索的字符串中的位置。如果没有找到匹配的子串则返回-1。
    如果是简单的搜索，可以用String对象的indexOf()方法。但对于较为复杂的模式匹配则需要使用search()方法。
    语法: index=stringObj.search(regExpObject);
    eg: var str="This is a dog,that is a cat";
        var regExp=/th[a-z]{2}/i;
        var index=str.search(regExp);
        document.write(index);
    (3) replace方法
    replace方法使用正则表达式模式对字符串执行搜索，并对搜索到的内容用指定的字符串替换，返回值为包含替换后的内容的字符串对象。
    语法: var newStr= stringObj.replace(regExpObject);
    eg: 要求删除用户输入中不必要的空格和“.”
        function checkInfo(){
          var str=document.getElementById("info").value;
          var regExp=/[\. ]/g; 
          document.getElementById("info").value=str.replace(regExp,""); 
        }//在正则表达式中，“.”是元字符，匹配除换行符“\n”之外的任何单字符，若要匹配“.”字符本身，需要使用“\.”










